{
  "swagger" : "2.0",
  "info" : {
    "title" : "insurance-crm-api",
    "description" : "This is a set of APIs for Insurance Domain. You can find out more information about implementation at [https://github.com/holodragon/msa-insurance](https://github.com/holodragon/msa-insurance).",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "host" : "petstore.swagger.io",
  "basePath" : "/v2",
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/pet/{petId}/uploadImage" : {
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "uploads an image",
        "description" : "",
        "operationId" : "uploadFile",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet to update",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "additionalMetadata",
          "in" : "formData",
          "description" : "Additional data to pass to server",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "file to upload",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Created user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "",
        "operationId" : "createUsersWithArrayInput",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "List of user object",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "",
        "operationId" : "createUsersWithListInput",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "List of user object",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "type" : "integer",
                "format" : "int32"
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "type" : "string",
                "format" : "date-time"
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "description" : "",
        "operationId" : "logoutUser",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "description" : "",
        "operationId" : "getUserByName",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing. ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "body",
          "description" : "Updated user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/product" : {
      "get" : {
        "summary" : "List All Products",
        "description" : "Gets a list of all `Product` entities.",
        "operationId" : "getProducts",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `Product` entities.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Create a Product",
        "description" : "Creates a new instance of a `Product`.",
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      },
      "post" : {
        "summary" : "Create a Product",
        "description" : "Update an existing instance of a `Product`.",
        "operationId" : "createProduct",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "A new `Product` to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/product/{productId}" : {
      "get" : {
        "summary" : "Get a Product",
        "description" : "Gets the details of a single instance of a `Product`.",
        "operationId" : "getProduct",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `Product`.",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a Product",
        "description" : "Updates an existing `Product`.",
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Updated `Product` information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Product",
        "description" : "Deletes an existing `Product`.",
        "operationId" : "deleteProduct",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "productId",
        "in" : "path",
        "description" : "A unique identifier for a `Product`.",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/product/findByName" : {
      "get" : {
        "summary" : "find product by name",
        "description" : "Find product by single name of product.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "name of product",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/product/{productId}/uploadImage" : {
      "post" : {
        "summary" : "uploads an image",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "additionalMetadata",
          "in" : "formData",
          "description" : "Additional data to pass to server",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/policies" : {
      "get" : {
        "summary" : "List All Policies",
        "description" : "Gets a list of all `Policy` entities.",
        "operationId" : "getPolicies",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `Policy` entities.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Policy"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a Policy",
        "description" : "Creates a new instance of a `Policy`.",
        "operationId" : "createPolicy",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "A new `Policy` to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Policy"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/policies/{policyId}" : {
      "get" : {
        "summary" : "Get a Policy",
        "description" : "Gets the details of a single instance of a `Policy`.",
        "operationId" : "getPolicy",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `Policy`.",
            "schema" : {
              "$ref" : "#/definitions/Policy"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a Policy",
        "description" : "Updates an existing `Policy`.",
        "operationId" : "updatePolicy",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Updated `Policy` information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Policy"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Policy",
        "description" : "Deletes an existing `Policy`.",
        "operationId" : "deletePolicy",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "policyId",
        "in" : "path",
        "description" : "A unique identifier for a `Policy`.",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/coverages" : {
      "get" : {
        "summary" : "List All coverages",
        "description" : "Gets a list of all `coverage` entities.",
        "operationId" : "getcoverages",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `coverage` entities.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Coverage"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a coverage",
        "description" : "Creates a new instance of a `coverage`.",
        "operationId" : "createcoverage",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "A new `coverage` to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Coverage"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/coverages/{coverageId}" : {
      "get" : {
        "summary" : "Get a coverage",
        "description" : "Gets the details of a single instance of a `coverage`.",
        "operationId" : "getcoverage",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `coverage`.",
            "schema" : {
              "$ref" : "#/definitions/Coverage"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a coverage",
        "description" : "Updates an existing `coverage`.",
        "operationId" : "updatecoverage",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Updated `coverage` information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Coverage"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a coverage",
        "description" : "Deletes an existing `coverage`.",
        "operationId" : "deletecoverage",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "coverageId",
        "in" : "path",
        "description" : "A unique identifier for a `coverage`.",
        "required" : true,
        "type" : "string"
      } ]
    }
  },
  "definitions" : {
    "Order" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "petId" : {
          "format" : "int64",
          "type" : "integer"
        },
        "quantity" : {
          "format" : "int32",
          "type" : "integer"
        },
        "shipDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "status" : {
          "description" : "Order Status",
          "enum" : [ "placed", "approved", "delivered" ],
          "type" : "string"
        },
        "complete" : {
          "default" : false,
          "type" : "boolean"
        }
      },
      "xml" : {
        "name" : "Order"
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int64",
          "type" : "integer"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "format" : "int32",
          "description" : "User Status",
          "type" : "integer"
        }
      },
      "xml" : {
        "name" : "User"
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "format" : "int32",
          "type" : "integer"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Product" : {
      "title" : "Root Type for Product",
      "description" : "Insurance Product Domain APIs",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "商品名稱",
          "type" : "string"
        },
        "description" : {
          "description" : "商品說明",
          "type" : "string"
        },
        "price" : {
          "format" : "double",
          "description" : "商品單價",
          "type" : "number"
        },
        "productId" : {
          "description" : "商品ID",
          "type" : "string"
        }
      },
      "example" : "{ \"productId\": \"100001\", \"name\": \"Product A\", \"description\": \"description ABC\", \"price\": 100.1}"
    },
    "Policy" : {
      "description" : "Insurance Policy Domain APIs",
      "properties" : {
        "policyNo" : {
          "description" : "Policy Number",
          "type" : "string"
        },
        "effectiveDate" : {
          "description" : "Effective Date",
          "type" : "string"
        },
        "expireDate" : {
          "description" : "Expire Date",
          "type" : "string"
        },
        "paymentOption" : {
          "description" : "Payment Option",
          "type" : "string"
        },
        "amount" : {
          "format" : "double",
          "description" : "Amount of unit",
          "type" : "number"
        },
        "active" : {
          "description" : "Active status",
          "type" : "boolean"
        },
        "coverage" : {
          "description" : "Coverages",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Coverage"
          }
        }
      }
    },
    "Coverage" : {
      "description" : "Coverage",
      "properties" : {
        "coverageNo" : {
          "description" : "Coverage Number",
          "type" : "string"
        },
        "name" : {
          "description" : "Name",
          "type" : "string"
        },
        "type" : {
          "description" : "Coverage type",
          "type" : "string"
        },
        "description" : {
          "description" : "Description",
          "type" : "string"
        }
      }
    }
  },
  "securityDefinitions" : {
    "petstore_auth" : {
      "type" : "oauth2",
      "flow" : "implicit",
      "authorizationUrl" : "https://petstore.swagger.io/oauth/dialog",
      "scopes" : {
        "write:pets" : "modify pets in your account",
        "read:pets" : "read your pets"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "tags" : [ {
    "name" : "user",
    "description" : "Operations about user",
    "externalDocs" : {
      "description" : "Find out more about our store",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "product",
    "description" : "Everything about insurance product domain"
  }, {
    "name" : "insurance",
    "description" : "Access to insurance services"
  } ],
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}